package com.listafacilnueva

import com.listafacilnueva.parser.QuantityParser

/**
 * üß™ TEST DE LISTA REAL DE 86 PRODUCTOS - VERIFICACI√ìN COMPLETA
 * 
 * Este test utiliza una lista real proporcionada por el usuario con 86 productos
 * que incluye casos muy complejos y desafiantes para el parser.
 * 
 * Casos incluidos:
 * - Productos pegados sin espacios
 * - Decimales complejos (2.5, 3.7, 750.5ml)
 * - M√∫ltiples productos en una l√≠nea
 * - Productos con marcas espec√≠ficas
 * - Unidades variadas (kg, ml, metros, etc.)
 * - N√∫meros escritos en palabras (catorce, dieciocho, etc.)
 * - Productos con descripciones largas
 * - Mezcla de formatos en una misma l√≠nea
 */
fun main() {
    println("üß™ TEST DE LISTA REAL DE 86 PRODUCTOS - VERIFICACI√ìN COMPLETA")
    println("=".repeat(70))
    println("üéØ OBJETIVO: Verificar detecci√≥n completa de lista compleja real")
    println("üìã PRODUCTOS ESPERADOS: 86")
    println("=".repeat(70))
    
    // üöÄ HABILITAR DEBUG para ver procesamiento detallado
    QuantityParser.setDebugMode(true)
    
    // üìù LISTA REAL DE 86 PRODUCTOS (texto original del usuario)
    val listaCompleta = """
medicina para presi√≥n marca, losart√°n o gen√©rico barato.(son tabletas de 50mg)
Yogur griego 2.5.
Mozzarella 0.8 en descuento.
3.7 kilos papas preguntar...cuales no tienen ojos...
Pollo entero m√°s barato por kilo en refrigerador
Macarrones 8.2 en oferta especial.
1.5malla duraznos peque√±os
2.3 chocolates marca hershey's o el m√°s cremoso

verduras org√°nicas ,11.5manzanas,16.8limones,7.3 cebollas rojas 12.1 peras maduras

1. 4.7 kg de az√∫car refinada, 1.2 sal marina y pimienta negra (la m√°s picante)
15.6 pilas AAA, 2.8 metros de cable coaxial no muy r√≠gido
media docena bombillas led. 8.3 interruptores dobles
750.5ml de antis√©ptico 1.4 paquetes de mascarillas quir√∫rgicas
Papel bond A4
2.9 metros de tuber√≠a PVC,,,7.1 codos de 90 grados.

1.6litros leche descremada2.5detergente en polvo4.8pa√±os de limpieza multiuso

1.4papa criolla mediana2.7apio fresco org√°nico3.1zanahoria baby

1.salm√≥n rosado 3.2kg extra fresco
2.5r√°banos rojos picantes

catorce velas arom√°ticas eucalipto
dieciocho pilas recargables tipo C

cinco focos led 60w trece metros cable calibre 12

pasta dental blanqueadora marca sensodyne o parodontax.(tubo de 120ml)
Champ√∫ reparador 1.7.
Desinfectante multiusos
9.3 rollos papel higi√©nico doble hoja preguntar...cual es m√°s suave...
Limpiador desengrasante m√°s potente en spray
Esponjas abrasivas 11.2 en combo.
1.8bolsas quinoa org√°nica
2.4 aceite oliva extra virgen marca borges o el m√°s puro

colonias importadas ,12.7brochas maquillaje,23.4servilletas h√∫medas,8.9 desodorantes roll-on 15.6 medias compresi√≥n

4. 3.8 kg de avena integral, 1.9 miel natural y canela molida (la m√°s arom√°tica)
19.2 tornillos autorroscantes, 4.5 metros de cinta americana resistente al agua
media docena de candados de seguridad. 9.7 llaves maestras
1.2litros de alcohol et√≠lico 96¬∞ 2.3 paquetes de gasas est√©riles
Cinta adhesiva transparente
5.1 metros de cable HDMI 4K,,,8.4 adaptadores USB-C multipuerto.

2.7metros cuerda n√°utica 3.9martillo de carpintero 5.2clavos de acero inoxidable

2.8metros de lona impermeable 6.1 metros de hilo encerado resistente
4.6tijeras profesionales de costura
7.3pegamento ep√≥xico bicomponente

diecisiete velas votivas arom√°ticas
veintitr√©s pilas de litio larga duraci√≥n

ocho focos hal√≥genos 500w catorce metros tubo galvanizado

suplemento vitam√≠nico marca centrum o kirkland.(frasco de 365 tabletas)
Crema hidratante 3.4.
Jab√≥n neutro pH 5.5
2.1 cepillos dentales el√©ctricos preguntar...cual tiene mejor bater√≠a...
Enjuague bucal antibacterial m√°s efectivo en botella grande
Toallitas desmaquillantes 6.8 en paquete familiar.
3.5bolsas garbanzos premium
4.7 vinagre bals√°mico a√±ejado marca modena o el m√°s concentrado

fragancia unisex premium ,18.9pinceles art√≠sticos,31.7pa√±uelos desechables,13.2 antitranspirantes cl√≠nicos 21.4 calcetines t√©rmicos
""".trimIndent()
    
    println("üîç PROCESANDO LISTA COMPLETA DE 86 PRODUCTOS")
    println("=".repeat(70))
    
    try {
        val resultados = QuantityParser.parse(listaCompleta)
        
        println("\n" + "=".repeat(70))
        println("üìä RESULTADOS DEL AN√ÅLISIS")
        println("=".repeat(70))
        
        val productosDetectados = resultados.size
        val porcentajeDeteccion = (productosDetectados.toDouble() / 86) * 100
        
        println("üìà ESTAD√çSTICAS GENERALES:")
        println("   ‚Ä¢ Productos esperados: 86")
        println("   ‚Ä¢ Productos detectados: $productosDetectados")
        println("   ‚Ä¢ Porcentaje de detecci√≥n: ${String.format("%.1f", porcentajeDeteccion)}%")
        
        // üìã DETALLES DE PRODUCTOS DETECTADOS
        println("\nüéØ PRODUCTOS DETECTADOS:")
        println("-".repeat(70))
        
        for ((index, producto) in resultados.withIndex()) {
            val cantidadStr = producto.cantidad?.let { "cantidad: $it" } ?: "sin cantidad"
            val unidadStr = producto.unidad?.let { " (${producto.unidad})" } ?: ""
            val marcasStr = if (producto.marcas.isNotEmpty()) " [marcas: ${producto.marcas.joinToString(", ")}]" else ""
            
            println("${String.format("%3d", index + 1)}. '${producto.nombre}' ($cantidadStr$unidadStr)$marcasStr")
        }
        
        // üèÜ EVALUACI√ìN DE RENDIMIENTO
        println("\n" + "=".repeat(70))
        println("üèÜ EVALUACI√ìN DE RENDIMIENTO")
        println("=".repeat(70))
        
        when {
            porcentajeDeteccion >= 95 -> {
                println("ü•á ¬°EXCELENTE! (${String.format("%.1f", porcentajeDeteccion)}%)")
                println("   ‚úÖ Detecci√≥n casi perfecta de lista compleja")
                println("   üöÄ Parser funciona a nivel profesional")
            }
            porcentajeDeteccion >= 90 -> {
                println("ü•à ¬°MUY BUENO! (${String.format("%.1f", porcentajeDeteccion)}%)")
                println("   ‚úÖ Excelente detecci√≥n de mayor√≠a de casos")
                println("   üîß Peque√±os ajustes podr√≠an mejorar a√∫n m√°s")
            }
            porcentajeDeteccion >= 80 -> {
                println("ü•â ¬°BUENO! (${String.format("%.1f", porcentajeDeteccion)}%)")
                println("   ‚úÖ Buena detecci√≥n general")
                println("   üîß Oportunidades de mejora en casos espec√≠ficos")
            }
            porcentajeDeteccion >= 70 -> {
                println("‚ö†Ô∏è ACEPTABLE (${String.format("%.1f", porcentajeDeteccion)}%)")
                println("   üîß Necesita optimizaci√≥n para casos complejos")
                println("   üìà Revisar patrones no detectados")
            }
            else -> {
                println("‚ùå NECESITA MEJORAS (${String.format("%.1f", porcentajeDeteccion)}%)")
                println("   üîß Revisar implementaci√≥n completa")
                println("   üìà Analizar casos problem√°ticos")
            }
        }
        
        // üîç AN√ÅLISIS DETALLADO POR CATEGOR√çAS
        println("\nüìä AN√ÅLISIS POR CATEGOR√çAS:")
        
        val conCantidad = resultados.count { it.cantidad != null }
        val sinCantidad = resultados.count { it.cantidad == null }
        val conUnidad = resultados.count { it.unidad != null }
        val conMarca = resultados.count { it.marcas.isNotEmpty() }
        
        println("   ‚Ä¢ Con cantidad expl√≠cita: $conCantidad")
        println("   ‚Ä¢ Sin cantidad (impl√≠cita): $sinCantidad")
        println("   ‚Ä¢ Con unidad detectada: $conUnidad")
        println("   ‚Ä¢ Con marca detectada: $conMarca")
        
        // üéØ CASOS ESPEC√çFICOS A VERIFICAR
        println("\nüîç VERIFICACI√ìN DE CASOS CR√çTICOS:")
        
        val casosEspeciales = listOf(
            "n√∫meros pegados" to resultados.any { it.nombre.contains("sandias") || it.nombre.contains("tomates") },
            "decimales complejos" to resultados.any { (it.cantidad ?: 0.0) > 10 && (it.cantidad ?: 0.0) < 100 },
            "productos con marca" to (conMarca > 0),
            "m√∫ltiples en l√≠nea" to resultados.any { it.nombre.length > 20 },
            "unidades espec√≠ficas" to (conUnidad > 0)
        )
        
        for ((caso, detectado) in casosEspeciales) {
            val status = if (detectado) "‚úÖ" else "‚ùå"
            println("   $status $caso: ${if (detectado) "DETECTADO" else "NO DETECTADO"}")
        }
        
    } catch (e: Exception) {
        println("üí• ERROR DURANTE EL PROCESAMIENTO: ${e.message}")
        e.printStackTrace()
    }
    
    println("\nüéâ TEST DE 86 PRODUCTOS COMPLETADO")
    println("=".repeat(70))
}

