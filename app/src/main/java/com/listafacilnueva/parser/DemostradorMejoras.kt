package com.listafacilnueva.parser

import com.listafacilnueva.model.Producto

/**
 * üöÄ DEMOSTRACI√ìN DIRECTA: MEJORAS EN ACCI√ìN
 * 
 * Este objeto permite probar directamente las mejoras sin depender del framework de testing
 */
object DemostradorMejoras {
    
    fun ejecutarDemostracion() {
        println("üöÄ DEMOSTRACI√ìN DIRECTA DE MEJORAS PARA LISTA EXTREMA")
        println("=".repeat(80))
        println("Fecha: ${java.time.LocalDateTime.now()}")
        println()
        
        // Casos extremos reales de la lista
        val casosExtremos = mapOf(
            "Yogur griego 2.5." to "Decimal con punto final",
            "1.8bolsas quinoa org√°nica" to "Decimal pegado sin espacio",
            "Esponjas abrasivas 11.2 en combo." to "Decimal con punto en el medio",
            "colonias importadas ,12.7brochas maquillaje,23.4servilletas h√∫medas,8.9 desodorantes roll-on 15.6 medias compresi√≥n" to "Caso h√≠brido s√∫per complejo",
            "2.7metros cuerda n√°utica 3.9martillo de carpintero 5.2clavos de acero inoxidable" to "Productos t√©cnicos con decimales",
            "1.6litros leche descremada2.5detergente en polvo3.8pa√±os de limpieza multiuso" to "M√∫ltiples productos pegados",
            "2.1 cepillos dentales el√©ctricos preguntar...cual tiene mejor bater√≠a..." to "Pregunta intercalada",
            "fragancia unisex premium ,18.9pinceles art√≠sticos,31.7pa√±uelos desechables,13.2 antitranspirantes cl√≠nicos 21.4 calcetines t√©rmicos" to "Lista h√≠brida con producto final sin coma"
        )
        
        var casosExitosos = 0
        var casosTotales = 0
        
        for ((caso, descripcion) in casosExtremos) {
            casosTotales++
            println("üîç CASO #$casosTotales: $descripcion")
            println("üìù Input: '$caso'")
            println("-".repeat(70))
            
            try {
                // ANTES: Parser actual
                val productosAntes = QuantityParser.parse(caso)
                println("üî¥ ANTES (parser actual): ${productosAntes.size} productos")
                mostrarProductos("  ", productosAntes)
                
                // DESPU√âS: Con mejoras b√°sicas
                val casoMejoradoBasico = QuantityParserMejoras.aplicarMejorasSeguras(caso)
                val productosBasicos = QuantityParser.parse(casoMejoradoBasico)
                println("\nüü° CON MEJORAS B√ÅSICAS: ${productosBasicos.size} productos")
                if (casoMejoradoBasico != caso) {
                    println("  Input procesado: '$casoMejoradoBasico'")
                }
                mostrarProductos("  ", productosBasicos)
                
                // DESPU√âS: Con mejoras avanzadas
                val casoMejoradoAvanzado = QuantityParserMejorasAvanzadas.aplicarTodasLasMejorasAvanzadas(caso)
                println("\nüü¢ CON MEJORAS AVANZADAS:")
                if (casoMejoradoAvanzado != caso) {
                    println("  Input procesado: '$casoMejoradoAvanzado'")
                }
                
                // Manejar separador especial si existe
                val productosAvanzados = if (casoMejoradoAvanzado.contains(" | ")) {
                    val fragmentos = casoMejoradoAvanzado.split(" | ").filter { it.trim().isNotBlank() }
                    val todosProductos = mutableListOf<Producto>()
                    for (fragmento in fragmentos) {
                        todosProductos.addAll(QuantityParser.parse(fragmento.trim()))
                    }
                    todosProductos
                } else {
                    QuantityParser.parse(casoMejoradoAvanzado)
                }
                
                println("  Productos generados: ${productosAvanzados.size}")
                mostrarProductos("  ", productosAvanzados)
                
                // EVALUACI√ìN
                val mejoro = productosAvanzados.size > productosAntes.size ||
                           (productosAvanzados.size == productosAntes.size && 
                            productosAvanzados.any { it.cantidad != null && it.cantidad != 1.0 })
                
                if (mejoro) {
                    println("\n  ‚úÖ √âXITO: Mejora detectada")
                    casosExitosos++
                } else {
                    println("\n  ‚ö†Ô∏è  MANTUVO: Sin mejora significativa")
                }
                
            } catch (e: Exception) {
                println("\n  ‚ùå ERROR: ${e.message}")
            }
            
            println("\n" + "=".repeat(80) + "\n")
        }
        
        // RESUMEN FINAL
        val porcentajeExito = (casosExitosos * 100) / casosTotales
        println("üèÜ RESUMEN FINAL DE LA DEMOSTRACI√ìN")
        println("=".repeat(50))
        println("üìä Casos exitosos: $casosExitosos de $casosTotales ($porcentajeExito%)")
        
        when {
            porcentajeExito >= 80 -> {
                println("ü•á EXCELENTE: Las mejoras funcionan muy bien")
                println("   La mayor√≠a de casos extremos ahora se procesan correctamente")
            }
            porcentajeExito >= 60 -> {
                println("ü•à BUENO: Las mejoras ayudan significativamente")  
                println("   M√°s de la mitad de los casos extremos mejoraron")
            }
            porcentajeExito >= 40 -> {
                println("ü•â ACEPTABLE: Las mejoras tienen efecto parcial")
                println("   Algunos casos extremos mejoraron, otros necesitan m√°s trabajo")
            }
            else -> {
                println("üîß NECESITA TRABAJO: Las mejoras requieren refinamiento")
                println("   Los casos extremos siguen siendo desafiantes")
            }
        }
        
        println("\nüí° CONCLUSI√ìN:")
        println("   Las mejoras implementadas abordan varios de los problemas")
        println("   m√°s comunes en la lista extremadamente desafiante.")
        println("   Los casos que no mejoran requieren an√°lisis m√°s espec√≠fico.")
    }
    
    private fun mostrarProductos(prefijo: String, productos: List<Producto>) {
        if (productos.isEmpty()) {
            println("${prefijo}‚ùå No se generaron productos")
        } else {
            productos.forEachIndexed { i, producto ->
                val cantidadDisplay = if (producto.cantidad != null && producto.cantidad != 1.0) {
                    " [${producto.cantidad}${producto.unidad ?: ""}]"
                } else {
                    ""
                }
                println("$prefijo${i+1}. '${producto.nombre.take(40)}'$cantidadDisplay")
            }
        }
    }
}

/**
 * Funci√≥n main para ejecutar el demostrador directamente
 */
fun main() {
    DemostradorMejoras.ejecutarDemostracion()
}
