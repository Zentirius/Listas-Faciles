import org.junit.Test
import org.junit.Assert.*
import com.listafacilnueva.parser.QuantityParser
import com.listafacilnueva.parser.QuantityParserMejoras

/**
 * üö® TEST DIRECTO CON LA LISTA EXTREMA REAL
 * 
 * Probamos cada caso problem√°tico espec√≠fico de la lista extrema
 * y vemos exactamente c√≥mo arreglarlos.
 */
class TestListaExtremaReal {
    
    @Test
    fun test_casos_extremos_especificos() {
        println("ÔøΩ PRUEBAS CON CASOS REALES DE LISTA EXTREMA")
        println("=".repeat(80))
        
        // Los casos m√°s problem√°ticos identificados en la lista real
        val casosExtremos = listOf(
            "Yogur griego 2.5.",
            "Mozzarella 0.8 en descuento.",  
            "Esponjas abrasivas 11.2 en combo.",
            "1.8bolsas quinoa org√°nica",
            "colonias importadas ,12.7brochas maquillaje,23.4servilletas h√∫medas,8.9 desodorantes roll-on 15.6 medias compresi√≥n",
            "2.7metros cuerda n√°utica 3.9martillo de carpintero 5.2clavos de acero inoxidable",
            "1.6litros leche descremada2.5detergente en polvo3.8pa√±os de limpieza multiuso",
            "Crema hidratante 3.4.",
            "3.5bolsas garbanzos premium",
            "fragancia unisex premium ,18.9pinceles art√≠sticos,31.7pa√±uelos desechables,13.2 antitranspirantes cl√≠nicos 21.4 calcetines t√©rmicos"
        )
        
        for ((index, caso) in casosExtremos.withIndex()) {
            probarCasoExtremo(index + 1, caso)
        }
    }
    
    private fun probarCasoExtremo(numero: Int, caso: String) {
        println("\\nüîç CASO EXTREMO #$numero: '$caso'")
        println("-".repeat(60))
        
        // AN√ÅLISIS PREVIO
        analizarProblemaEspecifico(caso)
        
        // ANTES: Parser actual sin mejoras
        println("\\nüî¥ PARSER ACTUAL (sin mejoras):")
        val resultadoActual = QuantityParser.parse(caso)
        mostrarResultados("ACTUAL", resultadoActual)
        
        // DESPU√âS: Con nuestras mejoras
        println("\\nüîß APLICANDO MEJORAS:")
        val casoMejorado = QuantityParserMejoras.aplicarMejorasSeguras(caso)
        println("  Input mejorado: '$casoMejorado'")
        
        val resultadoMejorado = QuantityParser.parse(casoMejorado)
        mostrarResultados("MEJORADO", resultadoMejorado)
        
        // EVALUACI√ìN
        evaluarMejora(caso, resultadoActual, resultadoMejorado)
        
        println("\\n" + "=".repeat(60))
    }
    
    private fun analizarProblemaEspecifico(caso: String) {
        println("üìä AN√ÅLISIS DEL PROBLEMA:")
        
        // Detectar decimales
        val decimales = Regex("\\d+\\.\\d+").findAll(caso).map { it.value }.toList()
        println("  Decimales encontrados: $decimales")
        
        // Detectar decimales pegados
        val pegados = Regex("\\d+\\.\\d+[a-zA-Z√°√©√≠√≥√∫√º√±]").findAll(caso).map { it.value }.toList()
        println("  Decimales pegados: $pegados")
        
        // Detectar punto final
        val puntoFinal = caso.endsWith(".") && Regex("\\d+\\.\\d+\\.$").find(caso) != null
        println("  ¬øDecimal con punto final?: $puntoFinal")
        
        // Detectar comas
        val tieneComas = caso.contains(",")
        val fragmentosComa = if (tieneComas) caso.split(",").size else 0
        println("  ¬øTiene comas?: $tieneComas (fragmentos: $fragmentosComa)")
        
        // Detectar contexto t√©cnico
        val esTecnico = QuantityParserMejoras.tieneContextoTecnico(caso)
        println("  ¬øContexto t√©cnico?: $esTecnico")
    }
    
    private fun mostrarResultados(tipo: String, productos: List<com.listafacilnueva.model.Producto>) {
        println("  Productos $tipo: ${productos.size}")
        if (productos.isEmpty()) {
            println("    ‚ùå No se generaron productos")
        } else {
            productos.forEachIndexed { i, producto ->
                println("    ${i+1}. '${producto.nombre}' [cantidad: ${producto.cantidad}${producto.unidad}]")
            }
        }
    }
    
    private fun evaluarMejora(
        casoOriginal: String, 
        resultadoActual: List<com.listafacilnueva.model.Producto>, 
        resultadoMejorado: List<com.listafacilnueva.model.Producto>
    ) {
        println("\\nüéØ EVALUACI√ìN DE LA MEJORA:")
        
        val cantidadActual = resultadoActual.size
        val cantidadMejorada = resultadoMejorado.size
        
        when {
            cantidadMejorada > cantidadActual -> {
                println("  ‚úÖ MEJORA SIGNIFICATIVA: $cantidadActual ‚Üí $cantidadMejorada productos (+${cantidadMejorada - cantidadActual})")
                
                // Analizar qu√© se mejor√≥ espec√≠ficamente
                analizarTipoMejora(casoOriginal, resultadoActual, resultadoMejorado)
            }
            cantidadMejorada == cantidadActual && cantidadMejorada > 0 -> {
                println("  ‚úÖ MANTUVO CALIDAD: $cantidadActual productos (sin regresi√≥n)")
                
                // Verificar si mejor√≥ la calidad de los productos
                val mejoroCalidad = verificarMejoraCalidad(resultadoActual, resultadoMejorado)
                if (mejoroCalidad) {
                    println("    üìà Mejor√≥ la calidad de los productos existentes")
                }
            }
            cantidadMejorada < cantidadActual -> {
                println("  ‚ö†Ô∏è  POSIBLE REGRESI√ìN: $cantidadActual ‚Üí $cantidadMejorada productos (-${cantidadActual - cantidadMejorada})")
            }
            cantidadMejorada == 0 -> {
                println("  ‚ùå NO FUNCION√ì: No se generaron productos")
                sugerirSolucionEspecifica(casoOriginal)
            }
        }
    }
    
    private fun analizarTipoMejora(
        caso: String,
        antes: List<com.listafacilnueva.model.Producto>,
        despues: List<com.listafacilnueva.model.Producto>
    ) {
        println("    üìã TIPO DE MEJORA DETECTADA:")
        
        if (caso.contains(",") && despues.size > antes.size) {
            println("      üîß Mejor√≥ separaci√≥n por comas")
        }
        
        if (Regex("\\d+\\.\\d+[a-zA-Z]").containsMatchIn(caso) && despues.size > antes.size) {
            println("      üîß Mejor√≥ separaci√≥n de decimales pegados")
        }
        
        if (caso.endsWith(".") && Regex("\\d+\\.\\d+\\.$").containsMatchIn(caso) && despues.size > antes.size) {
            println("      üîß Mejor√≥ detecci√≥n de decimal con punto final")
        }
        
        if (QuantityParserMejoras.tieneContextoTecnico(caso) && despues.size > antes.size) {
            println("      üîß Mejor√≥ manejo de contexto t√©cnico")
        }
    }
    
    private fun verificarMejoraCalidad(
        antes: List<com.listafacilnueva.model.Producto>,
        despues: List<com.listafacilnueva.model.Producto>
    ): Boolean {
        if (antes.isEmpty() || despues.isEmpty()) return false
        
        // Verificar si los nombres son m√°s limpios o las cantidades m√°s precisas
        val nombresMejores = despues.any { producto ->
            producto.nombre.length > 3 && !producto.nombre.contains(Regex("\\d+\\.\\d+[a-zA-Z]"))
        }
        
        val cantidadesMejores = despues.any { producto ->
            producto.cantidad != null && producto.cantidad != 1.0
        }
        
        return nombresMejores || cantidadesMejores
    }
    
    private fun sugerirSolucionEspecifica(caso: String) {
        println("    üí° SUGERENCIAS ESPEC√çFICAS:")
        
        when {
            caso.endsWith(".") && Regex("\\d+\\.\\d+\\.$").containsMatchIn(caso) -> {
                println("      - Mejorar detecci√≥n de decimal con punto final")
            }
            Regex("\\d+\\.\\d+[a-zA-Z]").containsMatchIn(caso) -> {
                println("      - Mejorar separaci√≥n de decimales pegados")
            }
            caso.contains(",") -> {
                println("      - Mejorar separaci√≥n por comas con m√∫ltiples decimales")
            }
            QuantityParserMejoras.tieneContextoTecnico(caso) -> {
                println("      - A√±adir m√°s palabras t√©cnicas al contexto")
            }
            else -> {
                println("      - Necesita an√°lisis m√°s profundo del patr√≥n espec√≠fico")
            }
        }
    }
    
    @Test
    fun test_proponer_mejoras_adicionales() {
        println("üöÄ ANALIZANDO QU√â MEJORAS ADICIONALES SE NECESITAN")
        println("=".repeat(70))
        
        // Casos que probablemente necesiten mejoras adicionales
        val casosDesafiantes = mapOf(
            "1.6litros leche descremada2.5detergente en polvo3.8pa√±os de limpieza multiuso" to 
            "M√∫ltiples productos pegados sin espacios ni comas",
            
            "fragancia unisex premium ,18.9pinceles art√≠sticos,31.7pa√±uelos desechables,13.2 antitranspirantes cl√≠nicos 21.4 calcetines t√©rmicos" to
            "Caso h√≠brido: comas + decimales pegados + producto final sin coma",
            
            "2.1 cepillos dentales el√©ctricos preguntar...cual tiene mejor bater√≠a..." to
            "Texto interrumpido con preguntas"
        )
        
        for ((caso, descripcion) in casosDesafiantes) {
            println("\\nüéØ CASO DESAFIANTE:")
            println("  Descripci√≥n: $descripcion")
            println("  Caso: '$caso'")
            
            // Probar con mejoras actuales
            val mejorado = QuantityParserMejoras.aplicarMejorasSeguras(caso)
            val resultado = QuantityParser.parse(mejorado)
            
            println("  Resultado actual: ${resultado.size} productos")
            
            // Proponer mejoras adicionales espec√≠ficas
            proponerMejorasAdicionales(caso, descripcion, resultado.size)
        }
    }
    
    private fun proponerMejorasAdicionales(caso: String, descripcion: String, productosActuales: Int) {
        println("  üí° MEJORAS ADICIONALES SUGERIDAS:")
        
        when {
            caso.contains("preguntar...") -> {
                println("    - Limpiar texto interrumpido con preguntas antes del parsing")
                println("    - Patr√≥n: texto.replace(Regex(\"preguntar\\\\.\\\\.\\\\..*?\\\\.\\\\.\\\\.\\\\.\"), \"\")")
            }
            
            Regex("\\d+\\.\\d+[a-zA-Z]+\\d+\\.\\d+[a-zA-Z]").containsMatchIn(caso) -> {
                println("    - Mejorar separaci√≥n de m√∫ltiples decimales pegados consecutivos")
                println("    - Usar separaci√≥n posicional por regex matches")
            }
            
            caso.contains(",") && !caso.endsWith(",") && 
            Regex("\\d+\\.\\d+\\s+[a-zA-Z]+\\s*$").containsMatchIn(caso) -> {
                println("    - Detectar producto final sin coma despu√©s de lista con comas")
                println("    - Separar √∫ltimo fragmento si tiene patr√≥n decimal+producto")
            }
            
            else -> {
                println("    - An√°lisis manual espec√≠fico requerido")
            }
        }
        
        // Calcular productos esperados vs actuales
        val decimalesEncontrados = Regex("\\d+\\.\\d+").findAll(caso).count()
        val productosEsperados = maxOf(1, decimalesEncontrados)
        
        if (productosActuales < productosEsperados) {
            println("    ‚ö†Ô∏è  GAP: Se esperan ~$productosEsperados productos pero solo genera $productosActuales")
        }
    }
}
