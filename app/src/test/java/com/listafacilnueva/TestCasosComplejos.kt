package com.listafacilnueva

import com.listafacilnueva.parser.QuantityParser
import org.junit.Test
import org.junit.Assert.*

class TestCasosComplejos {

    @Test
    fun testCasosExtremosActual() {
        println("üéØ TEST DE CASOS EXTREMOS CON EL PARSER ACTUAL")
        println("=" * 60)
        
        val casosComplejos = listOf(
            "pastelera con albaca marca, frutos del maipo o minuto verde.(es una bolsa de crema de choclo)" to "Producto con marcas y descripci√≥n",
            "2 lechugas francesas preguntar...cual son..." to "Producto con consulta integrada",
            "leche asadas ,6sandias,8tomates,6 zanaorias 5 zapatos" to "M√∫ltiples productos pegados",
            "1.1papa mediana2.sandia grande" to "Decimal con numeraci√≥n compleja",
            "cinco tomates" to "Palabra num√©rica",
            "1.2metros cable 2.bombilla grande 3.zapallo chino" to "Numeraci√≥n compleja con unidades",
            "champ√∫ suave ,4cepillos,12servilletas,3 desodorantes 7 calcetines" to "M√∫ltiples cantidades consecutivas",
            "1.5 litros de jugo de naranja,,,2 latas de at√∫n." to "Comas m√∫ltiples",
            "media docena de pl√°tanos. 3 manzanas" to "Media docena + cantidad simple",
            "Zanahorias" to "Producto sin cantidad expl√≠cita"
        )
        
        var exitosos = 0
        var fallidos = 0
        
        casosComplejos.forEach { (caso, descripcion) ->
            println("\nüß™ TEST: $descripcion")
            println("   üìù Entrada: '$caso'")
            
            try {
                val productos = QuantityParser.parse(caso)
                println("   üìä Detectados: ${productos.size} productos")
                
                productos.forEachIndexed { i, p ->
                    val cantidad = p.cantidad?.let { 
                        if (it % 1.0 == 0.0) it.toInt().toString() else it.toString() 
                    } ?: "1"
                    val unidad = p.unidad?.let { " $it" } ?: ""
                    println("      ${i+1}. ${p.nombre} (${cantidad}${unidad})")
                }
                
                // Validaciones espec√≠ficas
                val resultado = when {
                    caso.contains("pastelera") && productos.any { it.nombre.contains("pastelera", ignoreCase = true) } -> {
                        exitosos++; "‚úÖ Producto con marca detectado"
                    }
                    caso.contains("2 lechugas francesas") && productos.any { it.cantidad == 2.0 && it.nombre.contains("lechugas", ignoreCase = true) } -> {
                        exitosos++; "‚úÖ Cantidad con consulta manejada"
                    }
                    caso.contains("6sandias,8tomates") && productos.size >= 4 -> {
                        exitosos++; "‚úÖ Productos m√∫ltiples separados"
                    }
                    caso.contains("1.1papa mediana2.sandia") && productos.size >= 2 -> {
                        exitosos++; "‚úÖ Numeraci√≥n compleja procesada"
                    }
                    caso.contains("cinco tomates") && productos.any { it.cantidad == 5.0 && it.nombre.contains("tomates", ignoreCase = true) } -> {
                        exitosos++; "‚úÖ Palabra num√©rica convertida"
                    }
                    caso.contains("1.2metros cable") && productos.size >= 2 -> {
                        exitosos++; "‚úÖ Numeraci√≥n con unidades manejada"
                    }
                    caso.contains("4cepillos,12servilletas") && productos.size >= 4 -> {
                        exitosos++; "‚úÖ Cantidades consecutivas separadas"
                    }
                    caso.contains("1.5 litros") && productos.size >= 2 -> {
                        exitosos++; "‚úÖ Comas m√∫ltiples procesadas"
                    }
                    caso.contains("media docena") && productos.any { it.cantidad == 6.0 } -> {
                        exitosos++; "‚úÖ Media docena convertida"
                    }
                    caso.equals("Zanahorias") && productos.size == 1 -> {
                        exitosos++; "‚úÖ Producto sin cantidad detectado"
                    }
                    productos.size >= 1 -> {
                        "‚ö†Ô∏è  Al menos detect√≥ productos"
                    }
                    else -> {
                        fallidos++; "‚ùå No detect√≥ productos"
                    }
                }
                
                println("   $resultado")
                
            } catch (e: Exception) {
                fallidos++
                println("   üí• ERROR: ${e.message}")
                e.printStackTrace()
            }
            
            println("   " + "-".repeat(45))
        }
        
        println("\n" + "=".repeat(60))
        println("üìä RESUMEN DEL TEST DE CASOS COMPLEJOS:")
        println("   ‚úÖ Exitosos: $exitosos")
        println("   ‚ùå Fallidos: $fallidos")
        println("   üìà Ratio de √©xito: ${(exitosos * 100) / casosComplejos.size}%")
        
        when {
            exitosos >= casosComplejos.size * 0.9 -> println("üéâ ¬°EXCELENTE! El parser maneja muy bien los casos complejos")
            exitosos >= casosComplejos.size * 0.7 -> println("üòä ¬°BIEN! El parser es efectivo")
            exitosos >= casosComplejos.size * 0.5 -> println("üòê REGULAR: El parser necesita mejoras")
            else -> println("üòû PROBLEMAS: El parser necesita revisi√≥n seria")
        }
        
        // Assertions para JUnit
        assertTrue("Debe tener √©xito en al menos 50% de casos complejos", exitosos >= casosComplejos.size * 0.5)
    }
}

// Funci√≥n auxiliar
private operator fun String.times(n: Int): String = this.repeat(n)
