// SIMULACI√ìN MANUAL DEL PARSER - TEST DE LOS 2 PRODUCTOS FALTANTES

fun main() {
    println("üéØ SIMULACI√ìN: BUSCAR LOS 2 PRODUCTOS FALTANTES")
    println("Ejecutando parser manualmente en la lista completa...")
    println("=".repeat(70))
    
    val listaCompleta = """
pastelera con albaca marca, frutos del maipo o minuto verde.(es una bolsa de crema de choclo)
Leche sin lactosa 2.
Mantequilla 1 barata.
2 lechugas francesas preguntar...cual son...
Carne molida m√°s barata en bandeja
Tallarines 4 en oferta.
1malla tomates
1 huevo marca yemita o el m√°s barato

 leche asadas ,6sandias,8tomates,6 zanaorias 5 zapatos


1. 2 kg de tomates, 1 lechuga y pan (el m√°s barato)
6 huevos, 1 litro de leche no muy cara
media docena de pl√°tanos. 3 manzanas
500gr de carne molida 1 paquete de espaguetis
Zanahorias
1.5 litros de jugo de naranja,,,2 latas de at√∫n.



1.1papa mediana2.sandia grande 3.zapato grande

1.salmon 1kg
2.zanaorias


cinco tomates
ocho zanahorias

seis tomates ocho papas


crema dental con fluor marca colgate o sensodyne.(es un tubo de pasta dental)
Shampoo anticaspa 1.
Jab√≥n l√≠quido
3 rollos papel higi√©nico preguntar...cu√°l es mejor...
Detergente en polvo m√°s barato en caja
Esponjas 5 en oferta.
1bolsa arroz
1 aceite marca chef o el m√°s econ√≥mico

champ√∫ suave ,4cepillos,12servilletas,3 desodorantes 7 calcetines

2. 3 kg de az√∫car, 1 sal y vinagre (el m√°s barato)
8 pilas, 2 metros de cable no muy caro
media docena de velas. 4 focos
750ml de alcohol 1 paquete de algod√≥n
Papel aluminio
2.5 metros de cinta adhesiva,,,3 tubos de pegamento.

1.2metros cable 2.bombilla grande 3.zapallo chino

1.2metros de madera 3.8 metros de cable 
2.desodorantes
3.desinfectante

siete velas
diez pilas

cinco focos ocho rollos
    """.trimIndent()

    // Simulaci√≥n manual del procesamiento l√≠nea por l√≠nea
    println("üìã AN√ÅLISIS L√çNEA POR L√çNEA:")
    val lineas = listaCompleta.split("\n").filter { it.isNotBlank() }
    
    var conteoProductos = 0
    val productosDetectados = mutableListOf<String>()
    
    lineas.forEachIndexed { i, linea ->
        println("\n${i+1}. '$linea'")
        
        when {
            linea.contains("pastelera") -> {
                println("   ‚úÖ pastelera")
                productosDetectados.add("pastelera")
                conteoProductos++
            }
            linea.contains("Leche sin lactosa") -> {
                println("   ‚úÖ leche sin lactosa")
                productosDetectados.add("leche sin lactosa")
                conteoProductos++
            }
            linea.contains("Mantequilla") -> {
                println("   ‚úÖ mantequilla")
                productosDetectados.add("mantequilla")
                conteoProductos++
            }
            linea.contains("lechugas francesas") -> {
                println("   ‚úÖ lechugas francesas (con pregunta)")
                productosDetectados.add("lechugas francesas")
                conteoProductos++
            }
            linea.contains("Carne molida") -> {
                println("   ‚úÖ carne molida")
                productosDetectados.add("carne molida")
                conteoProductos++
            }
            linea.contains("Tallarines") -> {
                println("   ‚úÖ tallarines")
                productosDetectados.add("tallarines")
                conteoProductos++
            }
            linea.contains("1malla tomates") -> {
                println("   ‚úÖ tomates (malla)")
                productosDetectados.add("tomates")
                conteoProductos++
            }
            linea.contains("1 huevo") -> {
                println("   ‚úÖ huevo")
                productosDetectados.add("huevo")
                conteoProductos++
            }
            linea.contains("leche asadas ,6sandias,8tomates,6 zanaorias 5 zapatos") -> {
                println("   ‚úÖ leche asadas")
                println("   ‚úÖ sandias (6)")
                println("   ‚úÖ tomates (8)")
                println("   ‚úÖ zanaorias (6)")
                println("   ‚úÖ zapatos (5)")
                productosDetectados.addAll(listOf("leche asadas", "sandias", "tomates", "zanaorias", "zapatos"))
                conteoProductos += 5
            }
            linea.contains("2 kg de tomates, 1 lechuga y pan") -> {
                println("   ‚úÖ tomates (2 kg)")
                println("   ‚úÖ lechuga")
                println("   ‚úÖ pan")
                productosDetectados.addAll(listOf("tomates", "lechuga", "pan"))
                conteoProductos += 3
            }
            linea.contains("6 huevos, 1 litro de leche") -> {
                println("   ‚úÖ huevos (6)")
                println("   ‚úÖ leche (1 litro)")
                productosDetectados.addAll(listOf("huevos", "leche"))
                conteoProductos += 2
            }
            linea.contains("media docena de pl√°tanos") -> {
                println("   ‚úÖ pl√°tanos (6)")
                productosDetectados.add("pl√°tanos")
                conteoProductos++
            }
            linea.contains("3 manzanas") -> {
                println("   ‚úÖ manzanas")
                productosDetectados.add("manzanas")
                conteoProductos++
            }
            linea.contains("500gr de carne molida") -> {
                println("   ‚úÖ carne molida (500gr)")
                productosDetectados.add("carne molida")
                conteoProductos++
            }
            linea.contains("1 paquete de espaguetis") -> {
                println("   ‚úÖ espaguetis")
                productosDetectados.add("espaguetis")
                conteoProductos++
            }
            linea.contains("Zanahorias") -> {
                println("   ‚úÖ zanahorias")
                productosDetectados.add("zanahorias")
                conteoProductos++
            }
            linea.contains("1.5 litros de jugo de naranja") -> {
                println("   ‚úÖ jugo de naranja")
                productosDetectados.add("jugo de naranja")
                conteoProductos++
            }
            linea.contains("2 latas de at√∫n") -> {
                println("   ‚úÖ at√∫n")
                productosDetectados.add("at√∫n")
                conteoProductos++
            }
            linea.contains("1.1papa mediana2.sandia grande 3.zapato grande") -> {
                println("   ‚ùì papa mediana (1.1) - ¬øDetectado?")
                println("   ‚ùì sandia grande (2) - ¬øDetectado?")
                println("   ‚ùì zapato grande (3) - ¬øDetectado?")
                // CASO PROBLEM√ÅTICO - puede fallar
            }
            linea.contains("1.salmon 1kg") -> {
                println("   ‚úÖ salmon")
                productosDetectados.add("salmon")
                conteoProductos++
            }
            linea.contains("2.zanaorias") -> {
                println("   ‚úÖ zanaorias (2)")
                productosDetectados.add("zanaorias")
                conteoProductos++
            }
            linea.contains("cinco tomates") -> {
                println("   ‚úÖ tomates (cinco)")
                productosDetectados.add("tomates")
                conteoProductos++
            }
            linea.contains("ocho zanahorias") -> {
                println("   ‚úÖ zanahorias (ocho)")
                productosDetectados.add("zanahorias")
                conteoProductos++
            }
            linea.contains("seis tomates ocho papas") -> {
                println("   ‚úÖ tomates (seis)")
                println("   ‚úÖ papas (ocho)")
                productosDetectados.addAll(listOf("tomates", "papas"))
                conteoProductos += 2
            }
            linea.contains("crema dental") -> {
                println("   ‚úÖ crema dental")
                productosDetectados.add("crema dental")
                conteoProductos++
            }
            linea.contains("Shampoo") -> {
                println("   ‚úÖ shampoo")
                productosDetectados.add("shampoo")
                conteoProductos++
            }
            linea.contains("Jab√≥n l√≠quido") -> {
                println("   ‚úÖ jab√≥n l√≠quido")
                productosDetectados.add("jab√≥n l√≠quido")
                conteoProductos++
            }
            linea.contains("papel higi√©nico preguntar") -> {
                println("   ‚ùì papel higi√©nico - ¬øDetectado con pregunta?")
                // SOSPECHOSO #1
            }
            linea.contains("Detergente") -> {
                println("   ‚úÖ detergente")
                productosDetectados.add("detergente")
                conteoProductos++
            }
            linea.contains("Esponjas") -> {
                println("   ‚úÖ esponjas")
                productosDetectados.add("esponjas")
                conteoProductos++
            }
            linea.contains("1bolsa arroz") -> {
                println("   ‚úÖ arroz")
                productosDetectados.add("arroz")
                conteoProductos++
            }
            linea.contains("1 aceite") -> {
                println("   ‚úÖ aceite")
                productosDetectados.add("aceite")
                conteoProductos++
            }
            linea.contains("4cepillos,12servilletas,3 desodorantes 7 calcetines") -> {
                println("   ‚ùì champ√∫ suave - ¬øDetectado?")
                println("   ‚ùì cepillos (4) - ¬øDetectado?")
                println("   ‚ùì servilletas (12) - ¬øDetectado?")
                println("   ‚ùì desodorantes (3) - ¬øDetectado?")
                println("   ‚ùì calcetines (7) - ¬øDetectado?")
                // CASO PROBLEM√ÅTICO - n√∫meros pegados
            }
            linea.contains("3 kg de az√∫car") -> {
                println("   ‚úÖ az√∫car")
                productosDetectados.add("az√∫car")
                conteoProductos++
            }
            linea.contains("1 sal y vinagre") -> {
                println("   ‚úÖ sal")
                println("   ‚úÖ vinagre")
                productosDetectados.addAll(listOf("sal", "vinagre"))
                conteoProductos += 2
            }
            linea.contains("8 pilas, 2 metros de cable") -> {
                println("   ‚úÖ pilas")
                println("   ‚úÖ cable")
                productosDetectados.addAll(listOf("pilas", "cable"))
                conteoProductos += 2
            }
            linea.contains("media docena de velas") -> {
                println("   ‚úÖ velas")
                productosDetectados.add("velas")
                conteoProductos++
            }
            linea.contains("4 focos") -> {
                println("   ‚úÖ focos")
                productosDetectados.add("focos")
                conteoProductos++
            }
            linea.contains("750ml de alcohol") -> {
                println("   ‚úÖ alcohol")
                productosDetectados.add("alcohol")
                conteoProductos++
            }
            linea.contains("1 paquete de algod√≥n") -> {
                println("   ‚úÖ algod√≥n")
                productosDetectados.add("algod√≥n")
                conteoProductos++
            }
            linea.contains("Papel aluminio") -> {
                println("   ‚úÖ papel aluminio")
                productosDetectados.add("papel aluminio")
                conteoProductos++
            }
            linea.contains("2.5 metros de cinta adhesiva") -> {
                println("   ‚úÖ cinta adhesiva")
                productosDetectados.add("cinta adhesiva")
                conteoProductos++
            }
            linea.contains("3 tubos de pegamento") -> {
                println("   ‚úÖ pegamento")
                productosDetectados.add("pegamento")
                conteoProductos++
            }
            linea.contains("1.2metros cable 2.bombilla grande 3.zapallo chino") -> {
                println("   ‚ùì cable (1.2 metros) - ¬øDetectado?")
                println("   ‚ùì bombilla grande - ¬øDetectado?")
                println("   ‚ùì zapallo chino - ¬øDetectado?")
                // CASO PROBLEM√ÅTICO - numeraci√≥n vs cantidades
            }
            linea.contains("1.2metros de madera") -> {
                println("   ‚úÖ madera")
                productosDetectados.add("madera")
                conteoProductos++
            }
            linea.contains("3.8 metros de cable") -> {
                println("   ‚úÖ cable (3.8m)")
                productosDetectados.add("cable")
                conteoProductos++
            }
            linea.contains("2.desodorantes") -> {
                println("   ‚úÖ desodorantes")
                productosDetectados.add("desodorantes")
                conteoProductos++
            }
            linea.contains("3.desinfectante") -> {
                println("   ‚úÖ desinfectante")
                productosDetectados.add("desinfectante")
                conteoProductos++
            }
            linea.contains("siete velas") -> {
                println("   ‚úÖ velas (siete)")
                productosDetectados.add("velas")
                conteoProductos++
            }
            linea.contains("diez pilas") -> {
                println("   ‚úÖ pilas (diez)")
                productosDetectados.add("pilas")
                conteoProductos++
            }
            linea.contains("cinco focos ocho rollos") -> {
                println("   ‚úÖ focos (cinco)")
                println("   ‚ùì rollos (ocho) - ¬øDetectado?")
                productosDetectados.add("focos")
                conteoProductos++
                // SOSPECHOSO #2 - rollos puede fallar
            }
            else -> {
                if (linea.trim().isNotEmpty()) {
                    println("   ‚ö†Ô∏è L√≠nea no procesada")
                }
            }
        }
    }
    
    println("\n" + "=".repeat(70))
    println("üìä RESUMEN DE SIMULACI√ìN:")
    println("   Productos detectados en simulaci√≥n: $conteoProductos")
    println("   Productos reportados por la app: 68")
    println("   Diferencia: ${68 - conteoProductos}")
    
    println("\nüéØ CANDIDATOS PRINCIPALES PARA SER LOS 2 FALTANTES:")
    println("   1. papel higi√©nico (con pregunta intercalada)")
    println("   2. rollos (al final de l√≠nea con m√∫ltiples productos)")
    println("   3. Alg√∫n producto de: papa/sandia/zapato (l√≠nea problem√°tica)")
    println("   4. Alg√∫n producto de: cepillos/servilletas/calcetines (n√∫meros pegados)")
    println("   5. bombilla/zapallo (numeraci√≥n confusa)")
    
    println("\nüí° RECOMENDACI√ìN:")
    println("   Revisar espec√≠ficamente el procesamiento de:")
    println("   - '3 rollos papel higi√©nico preguntar...cu√°l es mejor...'")
    println("   - 'cinco focos ocho rollos'")
    println("   - '4cepillos,12servilletas,3 desodorantes 7 calcetines'")
    println("   - '1.1papa mediana2.sandia grande 3.zapato grande'")
    println("   - '1.2metros cable 2.bombilla grande 3.zapallo chino'")
}

// Extension para repeat
operator fun String.times(n: Int): String = this.repeat(n)
