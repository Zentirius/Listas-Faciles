package com.listafacilnueva.parser

import org.junit.Test
import org.junit.Assert.*

class TestListaExtremaAnalisis {

    @Test
    fun testAnalisisCompleto() {
        println("AN√ÅLISIS COMPLETO - LISTA EXTREMA")
        println("=".repeat(60))
        
        // Casos extremos espec√≠ficos de la lista
        val casosExtremos = listOf(
            // Caso 1: Decimales complejos
            "Yogur griego 2.5." to "Debe detectar cantidad 2.5, no tratar punto como numeraci√≥n",
            
            // Caso 2: M√∫ltiples productos con decimales pegados
            "verduras org√°nicas ,11.5manzanas,16.8limones,7.3 cebollas rojas 12.1 peras maduras" to "Debe separar 5 productos con cantidades decimales",
            
            // Caso 3: Numeraci√≥n con decimales t√©cnicos
            "1.6litros leche descremada2.5detergente en polvo3.8pa√±os de limpieza multiuso" to "Debe detectar numeraci√≥n (1,2,3) con productos que tienen decimales",
            
            // Caso 4: Productos t√©cnicos pegados
            "2.7metros cuerda n√°utica 3.9martillo de carpintero 5.2clavos de acero inoxidable" to "¬øEs numeraci√≥n (2,3,5) o cantidades reales?",
            
            // Caso 5: Cantidades decimales sin espacios
            "1.8bolsas quinoa org√°nica" to "Cantidad decimal 1.8 pegada al producto",
            
            // Caso 6: M√∫ltiples decimales en una l√≠nea
            "colonias importadas ,12.7brochas maquillaje,23.4servilletas h√∫medas,8.9 desodorantes roll-on 15.6 medias compresi√≥n" to "5 productos con decimales complejos",
            
            // Caso 7: Especificaciones t√©cnicas
            "5.1 metros de cable HDMI 4K,,,8.4 adaptadores USB-C multipuerto." to "Productos t√©cnicos con decimales y separadores m√∫ltiples",
            
            // Caso 8: Cantidades con punto final
            "Crema hidratante 3.4." to "Cantidad con punto final - no confundir con numeraci√≥n"
        )
        
        for ((index, caso) in casosExtremos.withIndex()) {
            val (input, descripcion) = caso
            println("\nüîç CASO ${index + 1}: $descripcion")
            println("INPUT: '$input'")
            
            try {
                val productos = QuantityParser.parse(input)
                println("‚úÖ RESULTADO: ${productos.size} productos detectados")
                
                productos.forEachIndexed { i, producto ->
                    val cantidadStr = producto.cantidad?.let { "${it}${producto.unidad ?: ""}" } ?: "sin cantidad"
                    println("   ${i + 1}. '${producto.nombre}' [$cantidadStr]")
                }
                
                // An√°lisis espec√≠fico por caso
                when (index) {
                    0 -> { // Yogur 2.5
                        val yogur = productos.find { it.nombre.contains("yogur", ignoreCase = true) }
                        if (yogur?.cantidad == 2.5) {
                            println("   ‚úÖ CORRECTO: Cantidad 2.5 preservada")
                        } else {
                            println("   ‚ùå ERROR: Cantidad 2.5 no detectada correctamente")
                        }
                    }
                    1 -> { // Verduras m√∫ltiples
                        if (productos.size >= 4) {
                            println("   ‚úÖ CORRECTO: M√∫ltiples productos separados")
                        } else {
                            println("   ‚ùå ERROR: No separ√≥ correctamente los productos")
                        }
                    }
                    2 -> { // Numeraci√≥n con decimales
                        if (productos.size == 3) {
                            println("   ‚úÖ CORRECTO: Detectada numeraci√≥n de lista (3 productos)")
                        } else {
                            println("   ‚ùå ERROR: No detect√≥ numeraci√≥n correctamente")
                        }
                    }
                    // ... m√°s an√°lisis espec√≠ficos
                }
                
            } catch (e: Exception) {
                println("‚ùå ERROR en parsing: ${e.message}")
                e.printStackTrace()
            }
            
            println("-".repeat(50))
        }
    }
    
    @Test
    fun `analizar patrones problem√°ticos espec√≠ficos`() {
        println("\nüî¨ AN√ÅLISIS DE PATRONES PROBLEM√ÅTICOS")
        println("=".repeat(60))
        
        // Patrones que pueden estar causando problemas
        val patronesProblematicos = mapOf(
            "Decimales con punto final" to listOf(
                "Yogur griego 2.5.",
                "Crema hidratante 3.4.",
                "Champ√∫ reparador 1.7."
            ),
            "Productos t√©cnicos pegados" to listOf(
                "1.8bolsas quinoa org√°nica",
                "2.4 aceite oliva extra virgen",
                "3.5bolsas garbanzos premium"
            ),
            "Numeraci√≥n con decimales complejos" to listOf(
                "2.7metros cuerda n√°utica 3.9martillo",
                "1.6litros leche descremada2.5detergente",
                "4.6tijeras profesionales de costura"
            ),
            "M√∫ltiples decimales separados por comas" to listOf(
                "12.7brochas maquillaje,23.4servilletas h√∫medas,8.9 desodorantes",
                "18.9pinceles art√≠sticos,31.7pa√±uelos desechables,13.2 antitranspirantes"
            )
        )
        
        for ((patron, casos) in patronesProblematicos) {
            println("\nüìã PATR√ìN: $patron")
            
            for ((index, caso) in casos.withIndex()) {
                println("\n  Caso ${index + 1}: '$caso'")
                
                try {
                    val productos = QuantityParser.parse(caso)
                    println("  ‚Üí ${productos.size} productos: ${productos.map { "${it.nombre} (${it.cantidad ?: "N/A"})" }}")
                    
                } catch (e: Exception) {
                    println("  ‚Üí ERROR: ${e.message}")
                }
            }
        }
    }
    
    @Test
    fun `proponer mejoras sin afectar funcionalidad existente`() {
        println("\nüí° AN√ÅLISIS PARA MEJORAS SEGURAS")
        println("=".repeat(60))
        
        // Casos que S√ç deben seguir funcionando (no tocar)
        val casosQueFuncionan = listOf(
            "1.2metros cable 2.bombilla grande 3.zapallo chino" to 3,
            "2.5 metros de cinta adhesiva,,,3 tubos de pegamento" to 2,
            "6sandias,8tomates,6 zanaorias 5 zapatos" to 4
        )
        
        println("üîí CASOS QUE DEBEN MANTENERSE FUNCIONANDO:")
        for ((caso, esperado) in casosQueFuncionan) {
            val productos = QuantityParser.parse(caso)
            val funcionaCorrectamente = productos.size == esperado
            println("  ${if (funcionaCorrectamente) "‚úÖ" else "‚ùå"} '$caso' ‚Üí ${productos.size} productos (esperado: $esperado)")
        }
        
        println("\nüîß MEJORAS PROPUESTAS (sin afectar lo que funciona):")
        println("1. Mejorar detecci√≥n de cantidades decimales con punto final")
        println("2. Optimizar separaci√≥n de productos con decimales complejos")
        println("3. Ajustar regex para productos t√©cnicos pegados")
        println("4. Mejorar manejo de m√∫ltiples decimales separados por comas")
    }
}
